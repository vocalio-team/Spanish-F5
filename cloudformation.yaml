AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation for Always-On Spot GPU Instance with F5-TTS

Parameters:
  InstanceType:
    Type: String
    Default: g4dn.xlarge
    AllowedValues:
      - g4dn.xlarge
      - g5.xlarge
      - g4dn.2xlarge
    Description: EC2 Spot GPU Instance Type
  
  VpcId:
    Type: String
    Default: vpc-d29f88b7
    Description: VPC ID where resources will be created
  
  PrimarySubnetId:
    Type: String
    Default: subnet-cbc5a6e0
    Description: Primary subnet ID (us-east-1b) for instances
  
  SecondarySubnetId:
    Type: String
    Default: subnet-1f507768
    Description: Secondary subnet ID (us-east-1c) for instances
  
  ECRImageURI:
    Type: String
    Default: 475302692635.dkr.ecr.us-east-1.amazonaws.com/f5-tts-api:latest
    Description: ECR URI for the F5-TTS Docker image
  
  KeyName:
    Type: String
    Default: debug-key-temp
    Description: EC2 Key Pair for SSH access
  
  DeploymentTimestamp:
    Type: String
    Default: "20250804-153010"
    Description: Timestamp to force launch template updates

Resources:

  # EFS File System for storing F5-TTS models
  ModelsEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: F5-TTS-Models
      PerformanceMode: generalPurpose
      Encrypted: true

  # EFS Mount Targets
  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ModelsEFS
      SubnetId: !Ref PrimarySubnetId
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ModelsEFS
      SubnetId: !Ref SecondarySubnetId
      SecurityGroups:
        - !Ref EFSSecurityGroup

  # Security Group for EFS
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: F5-TTS-EFS-SG-v8
      GroupDescription: Security group for F5-TTS EFS
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
          Description: Allow NFS access from instances

  SpotLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: F5-TTS-SpotTemplate-v8
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: ami-0f20cc6143e3cdb84  # Deep Learning OSS Nvidia Driver AMI GPU PyTorch 2.7 (Ubuntu 22.04) 20250803
        KeyName: !Ref KeyName
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 50
              VolumeType: gp3
              DeleteOnTermination: true
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            
            echo "[$(date)] Starting F5-TTS setup... Deployment: ${DeploymentTimestamp}"
            
            # Function to signal failure and exit
            signal_failure() {
              echo "[$(date)] FAILURE: $1"
              cfn-signal -e 1 --stack ${AWS::StackName} --resource SpotASG --region ${AWS::Region}
              exit 1
            }
            
            # Install required packages
            echo "[$(date)] Installing required packages..."
            apt update -y || signal_failure "apt update failed"
            apt install -y nfs-common curl || signal_failure "package install failed"
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz || signal_failure "cfn scripts install failed"
            
            # Mount EFS (simplified - no complex retry logic)
            echo "[$(date)] Mounting EFS..."
            mkdir -p /mnt/efs
            sleep 90  # Wait for EFS mount targets
            mount -t nfs4 -o nfsvers=4.1 ${ModelsEFS}.efs.us-east-1.amazonaws.com:/ /mnt/efs || signal_failure "EFS mount failed"
            mkdir -p /mnt/efs/models
            
            # Start Docker
            echo "[$(date)] Starting Docker..."
            systemctl start docker || signal_failure "Docker start failed"
            
            # ECR Login
            echo "[$(date)] ECR login..."
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 475302692635.dkr.ecr.us-east-1.amazonaws.com || signal_failure "ECR login failed"
            
            # Pull image
            echo "[$(date)] Pulling Docker image..."
            docker pull ${ECRImageURI} || signal_failure "Docker pull failed"
            
            # Start container without complex health checks
            echo "[$(date)] Starting container..."
            docker run --gpus all -d --restart unless-stopped \
              -p 80:8000 \
              --name f5-tts-api \
              -v /mnt/efs/models:/app/models \
              ${ECRImageURI} || signal_failure "Container start failed"
            
            # Simple wait and test
            echo "[$(date)] Waiting for container startup..."
            sleep 120  # 2 minutes for container to start
            
            # Just check if container is running - don't test HTTP yet
            docker ps | grep f5-tts-api || signal_failure "Container not running"
            
            echo "[$(date)] Container started successfully!"
            
            # Signal success immediately after container start
            echo "[$(date)] Sending success signal to CloudFormation"
            cfn-signal -e 0 --stack ${AWS::StackName} --resource SpotASG --region ${AWS::Region}
            
            echo "[$(date)] Setup completed successfully!"

  SpotASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - EFSMountTarget1
      - EFSMountTarget2
    Properties:
      AutoScalingGroupName: F5-TTS-SpotASG-v8
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrimarySubnetId
        - !Ref SecondarySubnetId
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref SpotLaunchTemplate
            Version: !GetAtt SpotLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Ref InstanceType
            - InstanceType: g4dn.2xlarge
            - InstanceType: g5.xlarge
        InstancesDistribution:
          SpotAllocationStrategy: price-capacity-optimized
          SpotMaxPrice: "0.50"
      HealthCheckType: EC2
      HealthCheckGracePeriod: 600
      TargetGroupARNs:
        - !Ref SpotTargetGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT30M
        WaitOnResourceSignals: true

  SpotTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: F5-TTS-SpotTargetGroup-v8
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      TargetType: instance

  SpotALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: F5-TTS-SpotALB-v8
      Scheme: internet-facing
      Subnets:
        - !Ref PrimarySubnetId
        - !Ref SecondarySubnetId
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application

  SpotListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SpotALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SpotTargetGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: F5-TTS-ALB-SG-v8
      GroupDescription: Security group for F5-TTS Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP traffic from internet

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: F5-TTS-Instance-SG-v8
      GroupDescription: Security group for F5-TTS EC2 instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow HTTP traffic from ALB
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: Allow SSH access (optional - remove if not needed)

  ALBEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref InstanceSecurityGroup
      Description: Forward traffic to instances

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: F5-TTS-EC2-Profile-v8
      Roles:
        - !Ref EC2Role

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: F5-TTS-EC2-Role-v8
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
        - PolicyName: CloudFormationSignal
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                Resource: '*'

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt SpotALB.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancer-DNS"
  
  LoadBalancerURL:
    Description: URL of the F5-TTS API
    Value: !Sub "http://${SpotALB.DNSName}"
    Export:
      Name: !Sub "${AWS::StackName}-API-URL"
  
  EFSFileSystemId:
    Description: EFS File System ID for F5-TTS models
    Value: !Ref ModelsEFS
    Export:
      Name: !Sub "${AWS::StackName}-EFS-ID"
